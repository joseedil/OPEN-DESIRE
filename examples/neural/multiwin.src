

	 --                    MULTI-WINNER COMPETITIVE LEARNING
	 -------------------------------------------------------
	 m=2 |  --                              number of inputs
	 nn=8 |  N=nn*nn |  --                number of patterns
	 n=64 |  --              no. of competitive-layer neurons
	 --
	 ARRAY x[m],v[n],h[n],z[m],W[n,m],INPUT[N,2],vv[n]
	 ARRAY D[n,m],Q[n,m],ONEn[n],ONEm[m],error[m],d[n]
	 -------------------------------------------------------
	 --              set up uniformly spaced cluster centers
	 s=0.75
	 for i=1 to nn |  for k=1 to nn
	     INPUT[i+(k-1)*nn,1]=s*(1+nn-2*i)/(1-nn)
	     INPUT[i+(k-1)*nn,2]=s*(1+nn-2*k)/(1-nn)
	     next  |  next
	 -------------------------------------------------------
	 for i=1 to n
	   for k=1 to m |  --        set random initial weights
	     W[i,k]=ran()
	     next
	   ONEn[i]=1 |  --                 column vector, all 1s
	   h[i]=0 |  --          initialize conscience (if any)
	   next
	 --
	 for k=1 to m |  ONEm[k]=1 |  next
	 display Q |  display N1 |  display C8
	 ------------------------------------------------------
	 --                           set experiment parameters
	 crit=-1 |  --                             CLEARN  mode
	 bb=10
	 lrate=.09 |  kappa=0.999999 |  lrate0=0.00001
	 lrate2=0.05
	 noise=0.05
	 NN=15000
	 ------------------------------------------------------
	 for i=1 to 12 |  --       "continued" runs show
	   drun  |  next  |  --         progress more clearly!
	 --
	 write 'type go for a check run' |  STOP
	 ------------------------------------------------------
	 --                                   make a recall run
	 lrate=0 |  lrate0=0
	 for i=1 to n |  h[i]=1.0E-25 |  next
	 drun
	 ONE=0 |  H=0 |  --     initialize checksum and entropy
	 a=1/NN
	 for i=1 to n
	   h[i]=a*h[i] |  --   statistical relative frequencies
	   ONE=ONE+h[i] |  --               accumulate checksum
	   H=H-h[i]*ln(h[i]) |  --           accumulate entropy
	   next
	 -----------------------------          display results
	 write h |  write
	 write 'H =  ';H/ln(2);' bits','      checksum =  ';ONE
	 write 'log2(N) = ';ln(N)/ln(2)
	 ------------------------------------------------------
	 DYNAMIC
	 ------------------------------------------------------
	 --                                                        weight-l
	 lrate=lrate*kappa+lrate0 |  --             decrease learn rate
	 iRow=t
	 Vector x=noise*(ran()+ran()+ran())+INPUT#
	 CLEARN v=W(x)lrate2,crit |  --                   compete,learn
	 Vectr delta h=v |  --                                        FSCL
	 Vector z=W%*v |  --                    reconstruct templates
	 Vector error=x-z
	 MATRIX Q=ONEn*error |  MATRIX D=ONEn*z-W
	 MATRIX D=D*D
	 Vector d=exp(-bb*D*ONEm)
	 -- DOT dd=d*d |  ddd=1/dd |  Vector d=d*ddd
	 MATRIX D=d*ONEm
	 DELTA W=lrate*D*Q
	 DISPXY z[1],z[2],x[1],x[2]

