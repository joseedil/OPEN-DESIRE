

	 --  SOFTMAX PATTERN CLASSIFIER
	 --     estimates a posteriori probabilities
	 --     implements associative memory
	 ------------------------------------------------------------------
	 cc=1 |  display N1 |  display C8 |  display R
	 nx=25 |  N=26
	 ARRAY input[nx],x[nx]
	 ARRAY INPUT[N,nx],TARGET[N,N]
	 ARRAY P[N],q[N],y[nx],yy[nx],W[N,nx]
	 ARRAY error[N]
	 --
	 --  for i=1 to N |  for k=1 to nx |  -- initialize W
	 --   W[i,k]=ran() |  next  |  next
	 --
	 MATRIX TARGET=1 |  --  (binary-classifier rows)
	 -------------------------------------------------------------
	 lrate=1.75 |  Tnoise=0.5 |  Rnoise=0.9
	 NN=2000
	 --------------------------------------------------------
	 connect 'alphabet.txt' as input 2
	 input #2,INPUT
	 disconnect 2
	 ------------------------
	 drun
	 write 'type go for successiPe recall runs' |  STOP
	 display F
	 ----------
	 NN=2
	 for i=1 to N
	   drun RECALL
	   write P |  -- show probabilities
	   for k=1 to 2500 |  write "wait" |  next
	   next
	 ---------------------------------------------
	 DYNAMIC
	 ----------------------------------------
	 iRow=t |  Vector x=INPUT#+Tnoise*ran()
	 Vector P=exp(W*x) |  DOT Psum=P*1
	 Vector P=P/Psum |  -- probability estimate
	 ------------------------------------------------
	 Vector error=TARGET#-P
	 DELTA W=lrate*error*x |  -- LMS algorithm
	 DOT enormsq=error*error
	 -- 
	 ENORMSQ=enormsq-scale |  -- offset display
	 dispt ENORMSQ
	 ----------------------------------------
	    label RECALL
	 iRow=i
	 Vector input=INPUT#
	 Vector x=input+Rnoise*ran()
	 Vector P=exp(W*x) |  DOT Psum=P*1
	 Vector P=P/Psum |  -- probability estimate
	 Vector q^=P |  Vector q=swtch(q) |  -- binary selector
	 Vector yy=INPUT%*P
	 Vector y=INPUT%*q |  -- associative memory
	 -------------------------------------------------------
	 Vector input=cc*input |  Vector x=cc*x
	 Vector yy=cc*yy |  Vector y=cc*y
	 SHOW  |  SHOW input,5 |  SHOW x,5 |  SHOW yy,5 |  SHOW y,5

