

	 -- STUDY SAMPLE AVERAGES, SAMPLE VARIANCES,
	 --    AND THEIR SAMPLING DISTRIBUTIONS
	 ------------------------------------------------------------------
	 display N1 |  display C8 |  display R
	 nmax=5000 |  --  maximum sample size
	 m=1000 |  --    number of replicated experiments
	 ------------------------------------------------------------------
	 -- first run computes sample averages and variances
	 --                  as functions of the sample size t
	 --
	 ARRAY x[m],xavg[m],xxavg[m],xvar[m],f[m],g[m]
	 ----------->  arrays are initialized to 0 by default, then
	 --     t starts at t=1 with xavg=x, goes to t=NN=nmax
	 NN=nmax
	 x0=0 |  --   "true" value of x
	 scale=0.01
	 drun
	 write 'type go to continue' |  STOP
	 ------------------------------------------------------------------
	 --  second run estimates probability densities
	 --                        for the sample size nmax	
	 --
	 h=0.025 |  --                  Parzen-window width
	 alpha=1/(2*h^2)
	 scale=1 |  Ascale=0.1 |  -- scaling
	 beta=Ascale/(h*sqrt(2*PI))
	 --                                                         
	 t=0 |  TMAX=1 |  NN=5000 |  -- (note that xx=2*t-TMAX)
	 drun READOUT
	 -----------------------------
	 DYNAMIC
	 -----------------------------
	 --  t is the sample size; note recursive averaging
	 --
	 Vector x=0.25*ran()+x0
	 Vector xavg=xavg+(x-xavg)/t
	 Vector xxavg=xxavg+(x^2-xxavg)/t
	 Vector xvar=xxavg-xavg^2
	 ------------------------------------------------------------------
	 --  compute the sampling distributions by
	 --    averaging statistics over m different samples
	 --
	 AVG Xavg=xavg*1 |  AVG XXavg=xavg*xavg
	 Xvar=XXavg-Xavg^2
	 --
	 --------->   offset and rescale the display
	 --
	 xvaro10=0.1*xvar[1] |  Xvarx100=100*Xvar
	 dispt xavg[1],xvaro10,Xavg,Xvarx100
	 ----------------------------------------------------------
	 -- Parzen-window probability-density estimation
	 --
	    label READOUT
	 xx=2*t-TMAX |  --                      display sweep
	 Vector f=beta*exp(alpha*(xx-x)*(x-xx))
	 Vector g=beta*exp(alpha*(xx-xavg)*(xavg-xx))
	 AVG F=f*1 |  AVG G=g*1
	 --                                                   offset displa
	 F=F-scale |  G=G-scale
	 dispxy xx,F,G

