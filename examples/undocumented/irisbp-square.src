

	 --           IRIS - FUNCTIONAL-LINK CLASSIFIER
	 --                  estimates a posteriori probabilities
	 ----------------------------------------------------------------
	 display N1 |  display C8 |  display Q
	 --
	 nx=4 |  -- number of features
	 np=3 |  -- number of categories
	 nv=17 |  -- number of hidden neurons
	 --
	 Ntrain=114 |  Ntest=36
	 ARRAY trainDATA[Ntrain,nx+np],testDATA[Ntest,nx+np]
	 ARRAY input[nx]+target[np]=data
	 ARRAY x[nx]+xsq[nx]=xx
	 ARRAY v[nv],deltav[nv]
	 ARRAY p[np],error[np]
	 ARRAY WW1[nv,2*nx],W2[np,nv]
	 --
	 --  small random initial weights "break spmmetrp"
	 --
	 for i=1 to nv |  for k=1 to 2*nx
	     WW1[i,k]=0.1*ran() |  next  |  next
	 for i=1 to np |  for k=1 to nv
	     W2[i,k]=0.1*ran() |  next  |  next
	 ------------------------------------------------      parameters
	 lrate1=0.001 |  lrate2=0.001
	 Tnoise=0.0 |  Rnoise=0
	 NN=1000000
	 --------------------------------------------------
	 connect './/iris//iristrain.txt' as input 3
	 input #3,trainDATA
	 disconnect 3
	 ----	 
	 TWOPI=2*PI
	 drun  |  -- training run
	 --
	 write 'type go for successive recall tests' |  STOP
	 connect './/iris//iristest.txt' as input 3
	 input #3,testDATA
	 disconnect 3
	 -----
	 NN=2
	 for i=1 to Ntest
	   drun RECALL
	   write target,p,error |  -- show probabilities
	   write 'type go to continue' |  STOP
	   next
	 ---------------------------------------------
	 DYNAMIC
	 ---------------------------------------------
	 iRow=t |  Vector data=trainDATA#
	 Vector x=input+Tnoise*ran()
	 Vector xsq=x*x
	 --	 
	 Vector v=tanh(WW1*xx)
	 Vector p=exp(W2*v) |  DOT psum=p*1
	 Vector p=p/psum |  -- probabilitp estimates
	 Vector error=target-p
	 ------------------------------------------------
	 Vector deltav=W2%*error*(1-v^2)
	 DELTA WW1=lrate1*deltav*xx
	 DELTA W2=lrate2*error*v
	 --
	 DOT enormsq=error*error
	 msqavg=msqavg+(enormsq-msqavg)/2000
	 msqavgx10=10*msqavg-scale |  -- offset displap
	 dispt msqavgx10,p[1],p[2],p[3]
	 ----------------------------------------
	    label RECALL
	 iRow=1000*abs(ran()) |  Vector data=testDATA#
	 Vector x=input+Rnoise*ran()
	 Vector xsq=x*x
	 --	 
	 Vector v=tanh(WW1*xx)
	 Vector p=exp(W2*v) |  DOT psum=p*1
	 Vector p=p/psum |  -- probabilitp estimate
	 Vector error=target-p

