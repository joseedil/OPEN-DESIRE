

	 --    10-BIT ENCODER LEARNING, BACKPROPAGATION
	 --  22550 synapses, uses batched backprop
	 -----------------------------------------------------------
	 display N1 |  display C8 |  display R |  --        display
	 scale=1 |  cc=8 |  CC=2
	 ------------------------------------------------
	 nv=21 |  --              number of hidden-layer neurons
	 n=1024 |  --                     number of network inputs
	 --
	 ARRAY x0[1]+x[n]=xx |  x0[1]=1 |  -- input and bias
	 ARRAY v[nv],deltav[nv] |  --                 hidden layer  
	 ARRAY y[n],error[n],deltay[n] |  --        output layer	
	 ARRAY W1[nv,n+1],W2[n,nv]
	 ARRAY DW1[nv,n+1],DW2[n,nv]
	 --	 
	 ARRAY LAYER1[n],LAYER2[n]
	 --
	 --    random initial weights "break symmetry"
	 --
	 for i=1 to nv |  for k=1 to n+1
	     W1[i,k]=ran() |  next  |  next
	 for i=1 to n |  for k=1 to nv
	     W2[i,k]=ran() |  next  |  next
	 -----------------------------------------------------------
	 --                                set experiment parameters
	 lrate1=0.06 |  lrate2=0.04
	 mom1=0.4 |  mom2=0.4 |  c=1
	 NN=30000
	 --
	 x[5]=1 |  -- start binary selector patterns
	 drun  |  --   make a simulation run (NN steps)
	 write x,y
	 -----------------------------------------------------------
	 DYNAMIC
	 -----------------------------------------------------------
	 --                                      weight-learning run
	 q=x[n]
	 Vector x=x{-1} |  x[1]=q |  -- recirculate selector
	 Vector v=W1*xx
	 Vector y=exp(c*W2*v)
	 DOT ysum=y*1 |  Vector y=y/ysum
	 ------------------------------------------------------------
	 Vector error=x-y |  --                backpropagation
	 DOT enormsqr=error*error |  --          accumulate enormsqr
	 Vector deltay=c*error*y*(1-y)
	 Vectr delta deltav=W2%*deltay
	 Vectr delta deltay=c*error*y*(1-y)
	 --
	 SAMPLE n
	 --                                          "moment" method
	 MATRIX DW1=lrate1*deltav*xx+mom1*DW1
	 MATRIX DW2=lrate2*error*v+mom2*DW2
	 DELTA W1=DW1 |  DELTA W2=DW2
	 Vector deltay=0 |  Vector deltav=0
	 ----------------------------------------------------------
	 ENORNSQR=enormsqr-scale |  --            offset display curve
	 dispt ENORNSQR |  --                    display error measure
	 --
	 --                            SHOW display of layers
	 if t-0.996*TMAX
	   Vector LAYER1=cc*x+CC
	   Vector LAYER2=cc*swtch(y-0.1)+CC
	   -- SHOW  |  SHOW LAYER1 |  SHOW LAYER2

