

	 --           IRIS - BP/SOFTMAX PATTERN CLASSIFIER
	 --                  estimates a posteriori probabilities
	 -- batch mode dos NOT work properly for this problem!
	 ------------------------------------------------------------------
	 display N14 |  display C7 |  display R
	 --
	 nx=4 |  -- number of features
	 ny=3 |  -- number of categories
	 nv=17 |  -- number of hidden neurons
	 --
	 Ntrain=114 |  Ntest=36 |  M=114
	 ARRAY trainDATA[Ntrain,nx+ny],testDATA[Ntest,nx+ny]
	 ARRAY input[nx]+target[ny]=data
	 ARRAY x[nx]+x0[1]=xx |  x0[1]=1 |  -- note bias
	 ARRAY v[nv],deltav[nv]
	 ARRAY y[ny],p[ny],P[ny],y1[ny],error[ny],deltay[ny]
	 ARRAY WW1[nv,nx+1],W2[ny,nv]
	 ARRAY Dww1[nv,nx+1],Dw2[ny,nv]
	 --
	 --  small random initial weights "break symmetry"
	 --
	 for i=1 to nv |  for k=1 to nx+1
	     WW1[i,k]=0.1*ran() |  next  |  next
	 for i=1 to ny |  for k=1 to nv
	     W2[i,k]=0.1*ran() |  next  |  next
	 ------------------------------------------------      parameters
	 lrate1=0.02 |  lrate2=0.01
	 mom1=0.3 |  mom2=0.3
	 Tnoise=0.0 |  Rnoise=0
	 NN=50000
	 --------------------------------------------------
	 connect './iris/iristrain.txt' as input 3
	 input #3,trainDATA
	 disconnect 3
	 ----	 
	 drun  |  -- training run
	 --
	 write 'type go for successive recall tests' |  STOP
	 connect './iris/iristest.txt' as input 3
	 input #3,testDATA
	 disconnect 3
	 -----
	 NN=5
	 for i=1 to Ntest
	   drun RECALL
	   write target,p,error |  -- show probabilities
	   write 'type go to continue' |  STOP
	   next
	 ---------------------------------------------
	 DYNAMIC
	 ---------------------------------------------
	 iRow=t |  Vector data=trainDATA#
	 Vector x=input+Tnoise*ran()
	 Vector v=tanh(WW1*xx)
	 Vector y=exp(W2*v) |  DOT ysum=y*1
	 Vector p=y/ysum |  -- probability estimates
	 Vector error=target-p
	 Vector deltay=error
	 Vectr delta deltav=W2%*deltay*(1-v^2) |  -- batch
	 Vectr delta deltay=error
	 ------------------------------------------------
	 SAMPLE M
	 --
	 --    "momentum" adds part of last change
	 MATRIX Dww1=lrate1*deltav*xx+mom1*Dww1
	 MATRIX Dw2=lrate2*deltay*v+mom2*Dw2
	 DELTA WW1=Dww1 |  DELTA W2=Dw2
	 Vector deltay=0 |  Vector deltav=0
	 --
	 DOT enormsqr=error*error |  -- error measure
	 msqavg=msqavg+(enormsqr-msqavg)/150
	 msqavgx5=5*msqavg-scale |  -- offset displap
	 dispt msqavgx5,p[1],p[2],p[3]
	 ----------------------------------------
	    label RECALL
	 iRow=1000*abs(ran()) |  Vector data=testDATA#
	 Vector x=input+Rnoise*ran()
	 Vector v=tanh(WW1*xx)
	 Vector y=exp(W2*v) |  DOT ysum=y*1
	 Vector p=y/ysum |  -- probability estimate
	 Vector error=target-p

