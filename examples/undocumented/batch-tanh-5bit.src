

	 --    5-BIT ENCODER LEARNING, BACKPROPAGATION
	 -----------------------------------------------------------
	 display N1 |  display C8 |  display R |  --        display
	 scale=0.5 |  cc=8 |  CC=2
	 ------------------------------------------------
	 nv=5 |  --                   number of hidden-layer neurons
	 n=32 |  --                          number of network inputs
	 G=0.95 |  --                                target amplitude
	 --
	 ARRAY x[n]+x0[1]=xx |  x0[1]=1 |  -- input and bias
	 ARRAY v[nv],deltav[nv] |  --               hidden layer
	 ARRAY y[n],error[n],deltay[n] |  --      output layer	
	 --	 
	 ARRAY WW1[nv,n+1],W2[n,nv],DWW1[nv,n+1],DW2[n,nv]
	 --	 
	 ARRAY INPUT[n,n]
	 ARRAY LAYER1[n],LAYER2[n]
	 --
	 --      reduce input and target amplitudes                        
	 for i=1 to n |  for k=1 to n
	     INPUT[i,k]=-G
	     next
	   INPUT[i,i]=G
	   next
	 --
	 --    random initial weights "break symmetry"
	 --
	 for i=1 to nv |  for k=1 to n+1
	     WW1[i,k]=ran() |  next  |  next
	 for i=1 to n |  for k=1 to nv
	     W2[i,k]=ran() |  next  |  next
	 -----------------------------------------------------------
	 --                        set experiment parameters
	 lrate1=0.12 |  lrate2=0.07
	 mom1=0.3 |  mom2=0.3
	 NN=2000
	 drun  |  --   make a simulation run (NN steps)
	 -----------------------------------------------------------
	 DYNAMIC
	 -----------------------------------------------------------
	 --                                    weight-learning run
	 iRow=t |  Vector x=INPUT#
	 Vector v=tanh(WW1*xx)
	 Vector y=tanh(W2*v)
	 ------------------------------------------------------------
	 Vector error=x-y
	 Vector deltay=error*(1-y^2)
	 Vectr delta deltav=W2%*deltay*(1-v^2)
	 Vectr delta deltay=error*(1-y^2)
	 --
	 SAMPLE n
	 --                                          "moment" method
	 MATRIX DWW1=lrate1*deltav*xx+mom1*DWW1
	 MATRIX DW2=lrate2*deltay*v+mom2*DW2
	 DELTA WW1=DWW1 |  DELTA W2=DW2
	 --
	 Vector deltay=0 |  Vector deltav=0
	 ----------------------------------------------------------
	 DOT enormsqr=error*error
	 ENORNSQR=enormsqr/n-scale |  --  offset display curve
	 dispt ENORNSQR |  --                display error measure
	 --
	 --                            SHOW display of layers
	 if t-NN*0.99
	   Vector LAYER1=cc*swtch(x)+CC
	   Vector LAYER2=cc*swtch(y)+CC
	   SHOW  |  SHOW LAYER1 |  SHOW LAYER2

