

	 -- 2-DIMENSIONAL TORPEDO SIMULATION
	 -- Monte Carlo statistics over n effective simulation runs
	 -- solves 6ndifferential equations!
	 --------------------------------------
	 display N1 |  display C8 |  display R |  scale=7
	 DT=0.01 |  TMAX=100 |  NN=1501
	 irule 1 |  ERRMAX=0.1
	 -------------------------------------------------------
	 ARRAY RT[48] |  -- RUDDER-COMMAND BREAKPOINT TABLES
	 data 19,20,25,26 |  --                                           
	 data 32,33,34,40,41,42,47,48,49 |  --            snake
	 data 55,56,57,63,64,65,71,72,73,74,75
	 data 0,0.25,0.25,0 |  --                      circle and attack
	 data 0,-0.25,0,0,0.25,0,0,-0.25,0,0,-0.25
	 data 0,0,-0.25,0,0,0.25,0,0,-0.125
	 read RT
	 -------------------------------------------------------
	 n=100
	 STATE u[n],v[n],psi[n],psidot[n],x[n],y[n] |  -- state variables
	 ARRAY cosp[n],sinp[n],rr[n] |  --             defined variables
	 ARRAY rrnoise[n] |  --                                           
	 ------------------------------------------------------
	 --              TORPEDO PARAMETERS
	 UC=0.25
	 X1=0.8155 |  X2=0.8155 |  --                u-equation parameter
	 UT=X1*UC*UC
	 Y1=-15.701 |  Y2=-0.23229 |  Y3=2.0002 |  --   v-parameters
	 N1=-303.801 |  N2=-44.866 |  N3=-243.866 |  --      r-params.
	 noise=0.07 |  --                                                 
	 ------------------------------------------------------------------
	 for k=1 to n |  x[k]=-2.4 |  y[k]=6 |  --            initialize
	   next
	 --
	 aa=tim(0) |  --  time measurement
	 drun
	 bb=tim(0)
	 write " you solved ";6*n;" nonlinear differential equations"
	 write "    to compute ";n;" torpedo trajectories and statistics"
	 write "    ";1000*(bb-aa)/n;" milliseconds per effective run"
	 write "total time needed was ";bb-aa;" seconds"
	 ------------------------------------------------------------------
	 DYNAMIC
	 ------------------------------------------------------------------
	 rudder=func1(t,RT) |  --         rudder command function
	 Vector rr=(rudder+rrnoise)*u |  --      noise-perturbed!
	 --
	 Vectr d/dt u=UT-X2*u*u
	 Vectr d/dt v=u*(Y1*v+Y2*psidot+Y3*rr)
	 Vectr d/dt psidot=u*(N1*v+N2*psidot+N3*rr)
	 Vectr d/dt psi=psidot
	 --
	 Vector cosp=cos(psi) |  Vector sinp=sin(psi)
	 Vectr d/dt x=u*cosp-v*sinp
	 Vectr d/dt y=u*sinp+v*cosp
	 --------------------------------------------------------
	 OUT
	 Vector rrnoise=noise*(ran()+ran()+ran()+ran())
	 --
	 --                                  compute Monte Carlo statistics
	 DOT xSum=x*1 |  DOT xxSum=x*x
	 xAvg=xSum/n |  xxAvg=xxSum/n
	 DOT ySum=y*1 |  DOT yySum=y*y
	 yAvg=ySum/n |  yyAvg=yySum/n
	 varx=xxAvg-xAvg^2 |  vary=yyAvg-yAvg^2
	 Sx=5*sqrt(abs(varx)) |  Sy=5*sqrt(abs(vary))
	 dispt xAvg,yAvg,Sx,Sy

