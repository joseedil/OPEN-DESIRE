

	 --                  COMPETITIVE LEARNING - MAX. CORRELATION
	 ------------------------------------------------------
	 m=2 |  --                             number of inputs
	 n=16 |  --         number of competitive-layer neurons
	 --
	 ARRAY x[m],v[n],h[n],z[m],W[n,m],half[m],WW[n,m],error[m],q[n]
	 for k=1 to m
	   half[k]=0.5 |  --                    auxiliary vector
	   for i=1 to n
	     W[i,k]=0.01*ran() |  --    small random initial weights
	     next
	   next
	 display Q |  display N1 |  display C8
	 ------------------------------------------------------
	 --                           set experiment parameters
	 lrate=0.2 |  --                              learning rate
	 S=1 |  --                       decay rate for lrate
	 c=0.9 |  -- 		softmax coefficient
	 scale=1
	 NN=10000 |  TMAX=NN-1
	 ------------------------------------------------------
	 SS=S/TMAX |  lrate1=lrate
	 display 1
	 drun  |  --                 simulation run (NN trials)
	 NN=2000
	 drun  |  --                    short run shows results
	 ------------------------------------------------------
	 --                                          recall run
	 lrate=0
	 NN=1000 |  a=1/NN |  TMAX=NN-1 |  t=1
	 lrate=0
	 for i=1 to n |  h[i]=0 |  next  |  -- initialize count
	 display 0 |  drun  |  --          run without graphics
	 ---------------------
	 ONE=0 |  H=0 |  --     initialize checksum and entropy
	 for i=1 to n
	   h[i]=a*h[i] |  --   statistical relative frequencies
	   ONE=ONE+h[i] |  --               accumulate checksum
	   H=H-h[i]*ln(h[i]+1.0E-25) |  --   accumulate entropy
	   next
	 -----------------------------          display results
	 write h
	 write 'H = ';H/ln(2);' bits','       checksum = ';ONE
	 ------------------------------------------------------
	 DYNAMIC
	 ------------------------------------------------------
	 --                                 weight-learning run
	 lrate1=lrate*exp(-SS*t) |  --      decrease learn rate
	 Vector x=ran()
	 MATRIX WW=W*W
	 Vector v=exp(c*(W*x-WW*half))
	 DOT vsum=v*1 |  Vector v=v/vsum
	 Vector q^=v |  Vector q=swtch(q)
	 Vectr delta h=v |  --     accumulate histogram (recall run)
	 --------------
	 --                               reconstruct templates
	 Vector z=W%*q |  Vector error=x-z
	 DELTA W=lrate1*v*error
	 DISPXY x[1],x[2],z[1],z[2]

