

	 --                                 SIMPLE ANALOG FILTER
	 -- H = 1/(s^2 + a[1]s + a[2]) 
	 -- successive samples of the filter output are stored
	 --      in an array that will be used to compute the FFT
	 ---------------------------------------------------------
	 display N1 |  display C8 |  display R
	 NN=16384 |  DT=0.001 |  TMAX=60
	 n=3 |  STATE x[n] |  ARRAY a[n]+b[n]+b0[1]=ab
	 ARRAY OUTPUTx[NN] |  --  FFT arrays
	 ARRAY OUTPUTy[NN]
	 ------------------------------------------------ 	
	 --          specify filter parameters 	 
	 a[1]=1
	 a[2]=2
	 a[3]=2
	 b[1]=1 |  -- other a[i], b[i] default to 0
	 bb=0 |  --         feedforward coefficient
	 --------------------------------------------
	 t=0 |  --   (default initial t would be t=1)
	 x[1]=1 |  -- to get impulse response
	 scale=0.5 |  --       display scale
	 drunr
	 write 'type go for FFT' |  STOP
	 --------------------------------------------
	 FFT F,NN,OUTPUTx,OUTPUTy
	 scale=400 |  t=1
	 ---------------------------------------------------
	 --  create abscissa and ordinate arrays 
	 --       for interpolated frequency-response plot
	 NN=501
	 ARRAY x1[NN]+OUT1x[NN]=OUTx |  -- extended arrays
	 ARRAY x2[NN]+OUT1y[NN]=OUTy
	 --
	 for i=1 to NN
	   x1[i]=i |  x2[i]=i
	   OUT1x[i]=OUTPUTx[i] |  OUT1y[i]=OUTPUTy[i]
	   next
	 ---------------------------------------------------
	 t=1
	 drunr FFT |  --            drunr resets t=1
	 write 'type go for amplitude/phase display' |  STOP
	 scale=400
	 drun SECOND |  -- amplitude/phase display
	 ---------------------------------------------------------
	 DYNAMIC
	 ---------------------------------------------------------
	 input=0 |  -- for impulse response
	 output=x[n]+bb*input |  --      note the feedforward term
	 Vectr d/dt x=x{-1}+b*input-a*output
	 dispt output
	 ----------                                 fill FFT array
	 store OUTPUTx=output
	 ---------------------------------------------------------
	    label FFT
	 xx=func1(t;OUTx) |  yy=func1(t;OUTy) |  -- extended arrays
	 outx=xx-0.5*scale |  --             offset
	 outy=0.5*yy+0.5*scale
	 dispt outx,outy
	 ----------------------------     AMPLITUDE/PHASE DISPLAY
	    label SECOND
	 xx=func1(t;OUTx) |  yy=func1(t;OUTy) |  --     interpolate
	 r=sqrt(xx*xx+yy*yy)
	 phix80=80*atan2(yy,xx)
	 dispt r,phix80

