

	 --                              DELAY-LINE PREDICTOR
	 --     predicts Mackey-Glass chaos generator
	 ----------------------------------------------------------------
	 display N3 |  display C8 |  display R |  scale=2
	 ----------------------------------------------------------------
	 TMAX=300 |  DT=0.04 |  NN=TMAX/DT+1
	 a=0.2 |  b=0.1 |  c=10 |  tau=25
	 ARRAY DD[1000] |  --       time-delay buffer
	 s=10 |  --                     initialize  delay buffer
	 ------------------------------------------------------------------
	 m=50 |  --                        predictor delay     <****
	 nx=50 |  --         number of delay-line neurons
	 nv=17 |  --     number of hidden-layer neurons
	 --
	 ARRAY signal[m]
	 --
	 --                              inputdelay line, input bias
	 ARRAY x[nx]+x0[1]=xx |  x0[1]=1
	 --
	 --                               backpropagation network
	 ARRAY v[nv] |  -- hidden layer
	 ARRAY deltav[nv]
	 ARRAY WW1[nv,nx+1],W2[1,nv]
	 ARRAY y[1],error[1]
	 --
	 for i=1 to nv |  for k=1 to nx+1 |  -- initialize
	     WW1[i,k]=0.1*ran()
	     next  |  next
	 -------------------------------------  parameters
	 --
	 lrate1=0.004 |  lrate2=0.0007
	 Tnoise=0.0
	 --
	 N=10 |  --                       make N training runs
	 for i=1 to N |  drun  |  next
	 ---------
	 write 'type go for prediction tests' |  STOP
	 lrate1=0 |  lrate2=0
	 drun  |  drun  |  -- test run
	 -----------------------------------------------------------
	 DYNAMIC
	 ------------------------------------------------------
	 tdelay Sd=DD,s,tau |  --  Mackey-Glass time series
	 d/dt s=a*Sd/(1+Sd^c)-b*s
	 -------------------------------------------------------------
	 --   delay "future" target signal , shift result into x
	 --
	 OUT  |  --             we use sampled data from now on!
	 target=s-0.7
	 Vector signal=signal{-1} |  signal[1]=target+Tnoise*ran()
	 Vector x=x{-1} |  x[1]=signal[m] |  -- input delay line
	 Vector v=tanh(WW1*xx)
	 Vector y=W2*v |  --            no limiter needed on output!
	 --
	 Vector error=target-y |  --           error feeds delay line
	 -- 	                                                 		
	 Vector deltav=W2%*error*(1-v^2) |  --    backpropagation	
	 DELTA WW1=lrate1*deltav*xx
	 DELTA W2=lrate2*error*v
	 ------------------------------------------------------ display
	 errorx10=10*error[1]-0.5*scale
	 Y=y[1]+0.5*scale
	 TARGET=target+0.5*scale
	 dispt Y,errorx10,TARGET

