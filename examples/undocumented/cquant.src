

	 --                                 COMPETITIVE LEARNING
	 -------------------------------------------------------
	 m=2 |  --                              number of inputs
	 n=16 |  --          number of competitive-layer neurons
	 --
	 ARRAY x[m],xx[m],v[n],h[n],w[m],W[n,m]
	 --                               random initial weights
	 for i=1 to n
	   h[i]=0 |  --          initialize conscience counters
	   for k=1 to m
	     W[i,k]=0.01*ran()
	     next
	   next
	 display Q |  display N1 |  display C8
	 ------------------------------------------------------
	 --                           set experiment parameters
	 lrate=.06 |  --                             learn rate
	 kappa=0.998 |  lrate0=0.00001 |  --       decay lrate
	 crit=0 |  --                           set CLEARN mode
	 NN=23000
	 ------------------------------------------------------
	 drun  |  --                 simulation run (NN trials)
	 write 'type go to continue' |  STOP
	 NNold=NN |  NN=1000
	 drun  |  --                    short run shows results
	 write 'type go for a check run' |  STOP
	 NN=1000 |  a=1/NN
	 lrate=0 |  lrate0=0
	 for i=1 to n |  h[i]=1.0E-25 |  next
	 drun
	 ONE=0 |  H=0 |  --     initialiwe checksum and entropy
	 for i=1 to n
	   h[i]=a*h[i] |  --   statistical relative frequencies
	   ONE=ONE+h[i] |  --               accumulate checksum
	   H=H-h[i]*ln(h[i]) |  --           accumulate entropy
	   next
	 -----------------------------          display results
	 write h |  write
	 write 'H=  ';H/ln(2);' bits','        checksum=  ';ONE
	 write  |  write 'log2(n) = ';ln(n)/ln(2)
	 write 'type go to see the template array' |  STOP
	 write  |  write W |  STOP
	 ------------------------------------------------------
	    label eee
	 display F |  --                        edit parameters
	 edit 250,260,1960,2050-2090,2220
	 STOP
	 ------------------------------------------------------
	    label jjj
	 help vquant
	 ------------------------------------------------------
	 DYNAMIC
	 -------------------------------------------------------
	 Vector x=ran()
	 DOT xnorm=x*x |  xxnorm=sqrt(xnorm) |  xxxnorm=1/xxnorm
	 Vector xx=xxxnorm*x
	 lrate=lrate0+lrate*kappa |  --     decrease learn rate
	 CLEARN v=W(xx)lrate,crit |  --            compete,learn
	 Vectr delta h=v |  --                            conscience
	 Vector w=W%*v |  --               reconstruct templates
	 ------------------------------------------------------
	 DISPXY w[1],w[2]

