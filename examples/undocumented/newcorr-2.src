

	 --          COMPETITIVE LEARNING
	 -------------------------------------------------------
	 display R |  display N1 |  display C8
	 nx=2 |  --                           number of inputs
	 n=4 |  --   number of competitive-layer neurons
	 --
	 ARRAY x[nx]+x0[1]=xx |  x0[1]=5 |  -- augmented input
	 ARRAY w[nx]+w0[1]=ww |  w0[1]=5
	 ARRAY v[n],h[n],W[n,nx+1],e[nx+1]
	 --                               random initial weights
	 for i=1 to n
	   h[i]=0 |  --          initialize conscience counters
	   for k=1 to nx+1 |  -- and connection weights
	     W[i,k]=ran()
	     next
	   next
	 ------------------------------------------------------
	 --                           set experiment parameters
	 lrate=.004 |  --                             learn rate
	 kappa=0.997 |  lrate0=0.00002 |  --         decay lrate
	 crit=0 |  --                           set CLEARN mode
	 c=7 |  -- softmax gain
	 NN=180000
	 ------------------------------------------------------
	 drun  |  --                 simulation run (NN trials)
	 NNold=NN |  NN=1000
	 drun  |  --                    short run shows results
	 write 'type go for a check run' |  STOP
	 NN=1000 |  a=1/NN
	 lrate=0 |  lrate0=0
	 for i=1 to n |  h[i]=1.0E-25 |  next
	 drun
	 ONE=0 |  H=0 |  --     initialize checksum and entropy
	 for i=1 to n
	   h[i]=a*h[i] |  --         statistical relative frequencies
	   ONE=ONE+h[i] |  --               accumulate checksum
	   H=H-h[i]*ln(h[i]) |  --           accumulate entropy
	   next
	 -----------------------------          display results
	 write h |  write
	 write 'H =  ';H/ln(2);' bits','        checksum =  ';ONE
	 write  |  write 'log2(n) = ';ln(n)/ln(2)
	 write  |  write W |  STOP
	 ------------------------------------------------------
	 DYNAMIC
	 -------------------------------------------------------
	 Vector x=ran()
	 DOT XX=xx*xx |  xroot=sqrt(XX) |  Vector xx=xx/xroot
	 Vector v=exp(c*W*xx) |  DOT vsum=v*1
	 Vector v=v/vsum
	 Vector ww=W%*v |  --    reconstruct templates
	 Vector e=xx-ww |  -- template-matching error
	 DELTA W=lrate*v*e
	 -- CLEARN v=W(x)lrate,crit |  --    compete,learn
	 Vectr delta h=v |  --                            conscience
	 ------------------------------------------------------
	 Vector w=w*xroot
	 DISPXY w[1],w[2]

