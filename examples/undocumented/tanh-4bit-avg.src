

	 --    4-BIT ENCODER LEARNING, BACKPROPAGATION
	 -----------------------------------------------------------
	 display N14 |  display C8 |  display R |  --        display
	 cc=8 |  CC=2
	 ------------------------------------------------
	 nv=11 |  --                   number of hidden-layer neurons
	 n=16 |  --                          number of network inputs
	 G=0.95 |  --                                target amplitude
	 --
	 ARRAY x[n]+x0[1]=xx |  x0[1]=1 |  -- input and bias
	 ARRAY v[nv],deltav[nv] |  --               hidden layer
	 ARRAY y[n],error[n],deltay[n] |  --        output layer
	 --	 
	 ARRAY W1[nv,n+1],W2[n,nv],DW1[nv,n+1],DW2[n,nv]
	 --	 
	 ARRAY INPUT[n,n]
	 ARRAY LAYER1[n],LAYER2[n] |  -- for SHOW display
	 --
	 --      reduce input and target amplitudes                        
	 for i=1 to n |  for k=1 to n
	     INPUT[i,k]=-G
	     next
	   INPUT[i,i]=G
	   next
	 --
	 --    small random initial weights "break symmetry"
	 --
	 for i=1 to nv |  for k=1 to n+1
	     W1[i,k]=0.1*ran() |  next  |  next
	 for i=1 to n |  for k=1 to nv
	     W2[i,k]=0.1*ran() |  next  |  next
	 ---------------------
	 --                                set experiment parameters
	 lrate1=0.06 |  lrate2=0.02
	 mom1=0.4 |  mom2=0.4
	 NN=10000
	 --
	 drun  |  --   make a simulation run (NN steps)
	 -----------------------------------------------------------
	 DYNAMIC
	 -----------------------------------------------------------
	 --                                      weight-learning run
	 iRow=2000*abs(ran()) |  Vector x=INPUT#
	 Vector v=tanh(W1*xx)
	 Vector y=tanh(W2*v)
	 ------------------------------------------------------------
	 Vector error=x-y |  --                backpropagation
	 Vector deltay=error*(1-y^2)
	 Vector deltav=W2%*deltay*(1-v^2)
	 --
	 --                                          "moment" method
	 MATRIX DW1=lrate1*deltav*xx+mom1*DW1
	 MATRIX DW2=lrate2*deltay*v+mom2*DW2
	 DELTA W1=DW1 |  DELTA W2=DW2
	 ----------------------------------------------------------
	 DOT enormsqr=error*error |  --          accumulate enormsqr
	 measure=measure+(enormsqr-measure)/t
	 MEASURE=measure/8-scale
	 ENORMSQR=2*enormsqr |  --            offset display curves
	 dispt MEASURE,ENORMSQR |  --     display error measures
	 --
	 --                            SHOW display of layers
	 if t-0.996*TMAX
	   Vector LAYER1=cc*swtch(x)+CC
	   Vector LAYER2=cc*swtch(y)+CC
	   SHOW  |  SHOW LAYER1 |  SHOW LAYER2

