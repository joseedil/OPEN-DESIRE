

	 --        SIMPLE 2nd-ORDER ANALOG FILTER
	 --   this program can implement a bank of m filters!
	 --            H = 1/(s^2 + A[1,1]s + A[2.1]) 
	 -- successive samples of the filter output are stored
	 --     in an array that will be used to compute the FFT
	 ------------------------------------------------------------------
	 display N1 |  display C8 |  display R |  --     display
	 NN=16384 |  DT=0.00001 |  TMAX=2
	 --
	 n=2 |  m=1
	 ARRAY input[m],output[m]
	 STATE x[n] |  ARRAY A[n,m],B[n,m],BB[m,m]
	 --
	 ARRAY OUTPUTx[NN],OUTPUTy[NN] |  -- array for FFT
	 ------------------------------------------------------------------
	 --          specify filter parameters 	 
	 A[1,1]=20000 |  -- squared circular frequency
	 A[2,1]=40 |  -- damping coefficient
	 BB[1,1]=1 |  -- feedforward coefficient
	 --              other A[i,k], B[i,k], BB[i,k] default to 0 
	 ------------------------------------------------------------------
	 x[1]=1 |  -- to get impulse response; note t0=0
	 scale=0.005 |  --       display scale
	 drun
	 write 'type go for FFT' |  STOP
	 ---------------------------------------
	 FFT F,NN,OUTPUTx,OUTPUTy
	 scale=2
	 ---------------------------------------------------
	 --  create abscissa and ordinate arrays 
	 --     for interpolated frequency-response plot
	 NN=5001
	 ARRAY x1[NN]+OUT1x[NN]=OUTx |  -- extended arrays
	 ARRAY x2[NN]+OUT1y[NN]=OUTy
	 --
	 for i=1 to NN
	   x1[i]=i |  x2[i]=i
	   OUT1x[i]=OUTPUTx[i] |  OUT1y[i]=OUTPUTy[i]
	   next
	 ---------------------------------------------------
	 t=1 |  TMAX=100 |  --           note t0=1
	 drunr FFT |  --          drunr resets t0=1
	 write 'type go for amplitude/phase display' |  STOP
	 scale=2
	 drun SECOND |  -- amplitude/phase display
	 ---------------------------------------------------------
	 DYNAMIC
	 ---------------------------------------------------------
	 Vector input=0 |  -- for impulse response
	 Vector output=x[n]+BB*input |  --  note feedforward term
	 Vectr d/dt x=x{-1}+B*input-A*output
	 dispt output[1]
	 ----------                                fill FFT array
	 store OUTPUTx=output[1]
	 ---------------------------------------------------------	   
	    label FFT
	 xx=func1(t;OUTx) |  --       extended arrays
	 yy=func1(t;OUTy)
	 outx=xx-0.5*scale |  --             offset
	 outy=0.5*yy+0.5*scale
	 dispt outx,outy
	 ----------------------------     AMPLITUDE/PHASE DISPLAY
	    label SECOND
	 xx=func1(t;OUTx) |  yy=func1(t;OUTy) |  -- interpolate
	 r=sqrt(xx*xx+yy*yy)
	 phix=0.5*atan2(yy,xx)
	 dispt r,phix

