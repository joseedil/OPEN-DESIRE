

	 --     DELAY-LINE SIGNAL CLASSIFIER
	 ------------------------------------------------------------
	 display N1 |  display C8 |  display R |  scale=4
	 ------------------------------------------------------------ 
	 TMAX=4*PI |  NN=100000
	 ------------------------------------------------------------
	 nx=4 |  --      number of delay-line neurons
	 nv2=9 |  --  number of hidden-layer neurons
	 --
	 ARRAY x[nx]+x0[1]=xx |  x0[1]=1 |  -- delay line
	 ARRAY v1[nx],deltav1[nx] |  --     combiner layer 
	 ARRAY v2[nv2],deltav2[nv2] |  --     hidden layer
	 ARRAY y[1],deltay[1],error[1]
	 ARRAY WW1[nx,nx+1],W2[nv2,nx],W3[1,nv2]
	 --
	 for i=1 to nx |  for k=1 to nx+1 |  -- initialize
	     WW1[i,k]=0.1*ran()
	     next  |  next
	 for i=1 to nv2 |  for k=1 to nx
	     W2[i,k]=0.1*ran()
	     next  |  next
	 for k=1 to nv2
	   W3[1,k]=0.1*ran()
	   next
	 -----------------------------------------------------------
	 lrate1=0.0003 |  lrate2=0.0002 |  lrate3=0.0001
	 noise=0
	 --
	 N=10
	 -- for i=1 to N |  drun  |  next  |  --  N training runs
	 drun
	 write "type go for a test" |  STOP
	 lrate1=0 |  lrate2=0 |  lrate3=0 |  drun  |  -- test
	 -----------------------------------------------------------
	 DYNAMIC
	 -----------------------------------------------------------
	 switch=swtch(sin(10*t)) |  --  alternate patterns
	 p=0.8*switch*sgn(cos(170*t)) |  -- sine waves
	 q=(1-switch)*sin(100*t) |  --   sine waves
	 input=p+q+noise*ran()
	 target=input
	 -------------------------------------------------------
	 Vector x=x{-1} |  x[1]=input
	 -------------
	 Vector v1=WW1*xx |  --              note bias
	 Vector v2=tanh(W2*v1)
	 Vector y=tanh(W3*v2)
	 --
	 Vector error=target-y |  --           backprop
	 Vector deltay=error*(1-y^2)
	 Vector deltav2=W3%*deltay*(1-v2^2)
	 Vector deltav1=W2%*deltav2
	 --
	 DELTA WW1=lrate1*deltav1*xx
	 DELTA W2=lrate2*deltav2*v1
	 DELTA W3=lrate3*deltay*v2
	 --
	 X=x[1]+0.5*scale
	 errorx10=10*error[1]
	 Y=y[1]-0.5*scale
	 dispt X,Y,error[1]

