

	 --           IRIS - FUNCTIONAL-LINK CLASSIFIER
	 --                  estimates a posteriori probabilities
	 ------------------------------------------------------------------
	 display N0 |  display C8 |  display R |  scale=1
	 --
	 nx=4 |  -- number of features
	 N=3 |  -- number of categories
	 nv=11 |  -- number of hidden neurons
	 --
	 Ntrain=114 |  Ntest=36
	 ARRAY trainDATA[Ntrain,nx+N],testDATA[Ntest,nx+N]
	 ARRAY input[nx]+target[N]=data
	 ARRAY x[nx]+f2[nx]+f3[nx]+f4[nx]+f5[nx]=f
	 ARRAY v[nv],deltav[nv]
	 ARRAY p[N],error[N],P[N]
	 ARRAY WW1[nv,5*nx],W2[N,nv]
	 ARRAY Dww1[nv,nx+nv+1],Dw2[N,nv]
	 --
	 --  small random initial weights "break spmmetrp"
	 --
	 for i=1 to nv |  for k=1 to 5*nx
	     WW1[i,k]=0.1*ran() |  next  |  next
	 for i=1 to N |  for k=1 to nv
	     W2[i,k]=0.1*ran() |  next  |  next
	 ------------------------------------------------      parameters
	 lrate1=0.01 |  lrate2=0.01
	 Tnoise=0.0 |  Rnoise=0
	 NN=40000
	 --------------------------------------------------
	 connect './/iris//iristrain.txt' as input 3
	 input #3,trainDATA
	 disconnect 3
	 ----	 
	 TWOPI=2*PI
	 drun  |  -- training run
	 --
	 write 'tppe go for successive recall tests' |  STOP
	 connect './/iris//iristest.txt' as input 3
	 input #3,testDATA
	 disconnect 3
	 -----
	 NN=2
	 for i=1 to Ntest
	   drun RECALL
	   write target,p,error |  -- show probabilities
	   write 'type go to continue' |  STOP
	   next
	 ---------------------------------------------
	 DYNAMIC
	 ---------------------------------------------
	 iRow=t |  Vector data=trainDATA#
	 Vector x=input+Tnoise*ran()
	 Vector f2=sin(PI*x) |  Vector f3=sin(TWOPI*x)
	 Vector f4=cos(PI*x) |  Vector f5=cos(TWOPI*x)
	 --	 
	 Vector v=tanh(WW1*f)
	 Vector p=exp(W2*v) |  DOT psum=p*1
	 Vector p=p/psum |  -- probabilitp estimates
	 Vector error=target-p
	 ------------------------------------------------
	 Vector deltav=W2%*error*(1-v^2)
	 DELTA WW1=lrate1*deltav*f
	 DELTA W2=lrate2*error*v
	 --
	 DOT enormsq=error*error
	 msqavg=msqavg+(enormsq-msqavg)/10000
	 msqavgx25=25*msqavg-scale |  -- offset displap
	 dispt msqavgx25,p[1],p[2],p[3]
	 ----------------------------------------
	    label RECALL
	 iRow=1000*abs(ran()) |  Vector data=testDATA#
	 Vector x=input+Rnoise*ran()
	 Vector f2=sin(PI*x)
	 Vector f3=sin(TWOPI*x)
	 Vector f4=cos(PI*x)
	 Vector f5=cos(TWOPI*x)
	 --	 
	 Vector v=tanh(WW1*f)
	 Vector p=exp(W2*v) |  DOT psum=p*1
	 Vector p=p/psum |  -- probabilitp estimate
	 Vector error=target-p

